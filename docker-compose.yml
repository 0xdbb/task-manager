services:
  postgres-db:
    image: "postgis/postgis:15-3.4-alpine"
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$PGUSER -d $$PGDATABASE"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:4.0-management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_log:/var/log/rabbitmq

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: task-manager-api
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "8000:8000"
    env_file:
      - .env
    restart: unless-stopped
    command: ["/app/main"]

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: task-manager-worker
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    deploy:
      mode: replicated
      endpoint_mode: vip
    restart: unless-stopped
    command: ["/app/worker"]

volumes:
  pgdata:
  rabbitmq_data:
  rabbitmq_log:

