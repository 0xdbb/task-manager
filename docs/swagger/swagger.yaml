basePath: /api/v1
definitions:
  internal_server.CreateTaskRequest:
    properties:
      description:
        example: Process server generated logs
        type: string
      due_time:
        example: "2025-03-30T12:00:00Z"
        type: string
      payload:
        example: '{"recipient":"user@example.com","subject":"Welcome","body":"Thanks
          for signing up!"}'
        type: string
      priority:
        example: HIGH
        type: string
      title:
        example: Data Processing
        type: string
      type:
        example: DATA_PROCESSING
        type: string
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    required:
    - description
    - due_time
    - payload
    - priority
    - title
    - type
    - user_id
    type: object
  internal_server.CreateUserRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      name:
        example: John
        type: string
      password:
        example: password123{#Pbb
        minLength: 6
        type: string
      role:
        enum:
        - ADMIN
        - STANDARD
        - WORKER
        example: ADMIN
        type: string
    required:
    - email
    - name
    - password
    - role
    type: object
  internal_server.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
      status:
        type: string
    type: object
  internal_server.Message:
    properties:
      message:
        example: success
        type: string
    type: object
  internal_server.UpdateTaskRequest:
    properties:
      result:
        example: "2025-04-01T12:00:00Z"
        type: string
      status:
        example: completed
        type: string
    type: object
  internal_server.UpdateUserRoleRequest:
    properties:
      role:
        type: string
    required:
    - role
    type: object
  internal_server.UserLoginRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: password123{#Pbb
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  internal_server.UserLoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        type: string
      access_token_expires_at:
        example: "2025-02-05T13:15:08Z"
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        type: string
      refresh_token_expires_at:
        example: "2025-02-06T13:15:08Z"
        type: string
      session_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      user:
        $ref: '#/definitions/internal_server.UserResponse'
    type: object
  internal_server.UserResponse:
    properties:
      created_at:
        example: "2025-01-01T12:00:00Z"
        type: string
      email:
        example: john.doe@example.com
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      name:
        example: John
        type: string
      role:
        example: ADMIN
        type: string
      updated_at:
        example: "2025-01-02T12:00:00Z"
        type: string
    required:
    - name
    type: object
  internal_server.renewAccessTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  internal_server.renewAccessTokenResponse:
    properties:
      access_token:
        type: string
      access_token_expires_at:
        type: string
    type: object
  pgtype.Text:
    properties:
      string:
        type: string
      valid:
        type: boolean
    type: object
  task-manager_internal_database_sqlc.NullTaskStatus:
    properties:
      task_status:
        $ref: '#/definitions/task-manager_internal_database_sqlc.TaskStatus'
      valid:
        description: Valid is true if TaskStatus is not NULL
        type: boolean
    type: object
  task-manager_internal_database_sqlc.Task:
    properties:
      created_at:
        type: string
      description:
        type: string
      due_time:
        type: string
      id:
        type: string
      payload:
        type: string
      priority:
        $ref: '#/definitions/task-manager_internal_database_sqlc.TaskPriority'
      result:
        $ref: '#/definitions/pgtype.Text'
      status:
        $ref: '#/definitions/task-manager_internal_database_sqlc.NullTaskStatus'
      title:
        type: string
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  task-manager_internal_database_sqlc.TaskPriority:
    enum:
    - LOW
    - MEDIUM
    - HIGH
    type: string
    x-enum-varnames:
    - TaskPriorityLOW
    - TaskPriorityMEDIUM
    - TaskPriorityHIGH
  task-manager_internal_database_sqlc.TaskStatus:
    enum:
    - PENDING
    - IN-PROGRESS
    - FAILED
    type: string
    x-enum-varnames:
    - TaskStatusPENDING
    - TaskStatusINPROGRESS
    - TaskStatusFAILED
info:
  contact: {}
  description: API documentation for CheapStores Service
  title: task-manager API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user with email and password
      parameters:
      - description: User Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_server.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      summary: Login User
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Create User Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_server.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.Message'
        "400":
          description: Bad request due to invalid query params
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "403":
          description: 'Forbidden: Admins only'
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      summary: Register User
      tags:
      - auth
  /auth/renew:
    post:
      consumes:
      - application/json
      description: Generates a new access token using a valid refresh token
      parameters:
      - description: Refresh Token Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_server.renewAccessTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.renewAccessTokenResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "401":
          description: Unauthorized or Invalid token
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Session not found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      summary: Renew Access Token
      tags:
      - auth
  /task:
    get:
      consumes:
      - application/json
      description: Get a list of all tasks with pagination. Supports filtering by
        passing `user_id` as a query parameter.
      parameters:
      - description: Page Size
        in: query
        name: page_size
        required: true
        type: integer
      - description: Page Number
        in: query
        name: page_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/task-manager_internal_database_sqlc.Task'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all created Tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task
      parameters:
      - description: Create Task Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_server.CreateTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/task-manager_internal_database_sqlc.Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Task
      tags:
      - tasks
  /task/{id}:
    get:
      consumes:
      - application/json
      description: Get task by ID
      parameters:
      - description: User ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/task-manager_internal_database_sqlc.Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Task
      tags:
      - tasks
  /task/{id}/status:
    patch:
      consumes:
      - application/json
      description: Update the status of an existing task
      parameters:
      - description: User ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      - description: Update Task Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_server.UpdateTaskRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/task-manager_internal_database_sqlc.Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Task Status
      tags:
      - tasks
  /user:
    get:
      consumes:
      - application/json
      description: Get a list of users
      parameters:
      - description: Number of users per page
        in: query
        name: page_size
        type: integer
      - description: Page number
        in: query
        name: page_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_server.UserResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Users
      tags:
      - users
  /user/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: User ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete User
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get User
      tags:
      - users
  /user/{id}/role:
    patch:
      consumes:
      - application/json
      parameters:
      - description: User ID (UUID format)
        in: path
        name: id
        required: true
        type: string
      - description: New Role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/internal_server.UpdateUserRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_server.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/internal_server.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update User Role
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
